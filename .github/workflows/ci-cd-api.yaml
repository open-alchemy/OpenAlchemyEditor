name: API CI-CD

on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/ci-cd-api.yaml"
      - "api/**"
      - "test/api/**"
      - "infrastructure/**"
      - "!infrastructure/lib/*-stack.ts"
      - "infrastructure/lib/api-stack.ts"
      - "!infrastructure/test/**"
      - "!**.md"

jobs:
  assets-seeds:
    runs-on: ubuntu-latest
    steps:
      - name: Get OpenAlchemy repo
        uses: actions/checkout@v2
        with:
          repository: jdkandersson/OpenAlchemy
      - name: upload seed assets
        uses: actions/upload-artifact@v2
        with:
          name: assets-seeds
          path: |
            examples/**/*example-spec.yml
            !**/*remote*/**

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]
    steps:
      - uses: actions/checkout@v2
      - name: set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}
      - name: install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      - name: cache pipenv
        id: cache-pipenv
        uses: actions/cache@v2.1.4
        with:
          path: |
            ~/.cache/pipenv
            api/.venv
          key: ${{ runner.os }}-${{ matrix.python-version }}-pipenv-${{ hashFiles('api/Pipfile.lock') }}
      - name: install dependencies
        working-directory: ./api
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        env:
          PIPENV_VENV_IN_PROJECT: 1
        run: |
          pipenv install --dev
      - name: run tests
        working-directory: ./api
        env:
          PIPENV_VENV_IN_PROJECT: 1
        run: |
          pipenv run test || pipenv --rm && pipenv install --dev && pipenv run test

  build:
    runs-on: ubuntu-latest
    needs:
      - assets-seeds
    steps:
      - uses: actions/checkout@v2
      - name: retrieve seeds
        uses: actions/download-artifact@v2
        with:
          name: assets-seeds
          path: api/dist/assets/seeds
      - name: cache build
        id: cache-build
        uses: actions/cache@v2.1.4
        with:
          path: api/dist/deployment-package.zip
          key: ${{ runner.os }}-api-${{ env.cache-name }}-slim-${{ hashFiles('api/**') }}
      - name: set up python
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: actions/setup-python@v2.2.2
        with:
          python-version: 3.9
      - name: install pipenv
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      - name: create package
        working-directory: ./api
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          pipenv lock -r > requirements.txt
          ../remove-lambda-built-in-dependencies.sh
          pip install --no-deps -r lambda-requirements.txt --target dist
          cp -r api.py app.py openapi library dist/
          cd dist
          zip -r deployment-package.zip .
      - name: upload artifacts for release
        uses: actions/upload-artifact@v2
        with:
          name: api
          path: api/dist/deployment-package.zip

  deploy:
    runs-on: ubuntu-latest
    needs:
      - test
      - build
    steps:
      - uses: actions/checkout@v2
      - name: set up node
        uses: actions/setup-node@v2.1.4
        with:
          node-version: 14.x
      - name: cache node modules
        id: cache-node_modules
        uses: actions/cache@v2.1.4
        env:
          cache-name: cache-node-modules
        with:
          path: infrastructure/node_modules
          key: ${{ runner.os }}-infrastructure-${{ env.cache-name }}-${{ hashFiles('infrastructure/package-lock.json') }}
      - name: install dependencies
        if: steps.cache-node_modules.outputs.cache-hit != 'true'
        working-directory: ./infrastructure
        run: npm install
      - name: retrieve api deployment package
        uses: actions/download-artifact@v2
        with:
          name: api
          path: infrastructure/resources/api/
      - name: deploy
        working-directory: ./infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
          AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
          AWS_OPEN_ALCHEMY_CERTIFICATE_ARN: ${{ secrets.AWS_OPEN_ALCHEMY_CERTIFICATE_ARN }}
          ALARM_EMAIL_ADDRESS: ${{ secrets.ALARM_EMAIL_ADDRESS }}
        run: |
          npm run deploy:api

  production-test:
    runs-on: ubuntu-latest
    needs:
      - deploy
    steps:
      - uses: actions/checkout@v2
      - name: set up python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: 3.9
      - name: install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      - id: cache-pipenv
        uses: actions/cache@v2.1.4
        with:
          path: |
            ~/.cache/pipenv
            test/api/.venv
          key: ${{ runner.os }}-test-api--${{ hashFiles('test/api/Pipfile.lock') }}
      - name: install dependencies
        working-directory: ./test/api
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        env:
          PIPENV_VENV_IN_PROJECT: 1
        run: |
          pipenv install --dev
      - name: Run tests
        working-directory: ./test/api
        env:
          PIPENV_VENV_IN_PROJECT: 1
        run: |
          pipenv run test || pipenv --rm && pipenv install --dev && pipenv run test
